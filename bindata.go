// Code generated by go-bindata. DO NOT EDIT.
// sources:
// bindata.go (13.748kB)
// templates/main.tmpl (260B)
// templates/openapi.tmpl (4.078kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x5d\x8f\xdb\x46\x96\x7d\x96\x7e\x45\xad\x80\x64\xa5\x89\x46\xcd\xef\x8f\x5e\xf8\x61\xc6\x76\x80\x2c\x36\xce\x22\x93\xc5\x3e\xa4\x82\xa0\x48\x16\xbb\x09\x4b\xa4\x96\x64\x3b\x65\x1b\xfd\xdf\x17\xe7\xde\x4b\x4a\x6a\x77\xb7\x3d\x99\xcc\xc3\x18\x68\xb7\x44\xb2\xaa\xee\xc7\xb9\xe7\x9e\x22\xd9\x57\x57\xea\x65\x57\x59\x75\x63\x5b\xdb\x9b\xd1\x56\xaa\x78\xaf\x6e\xba\x3f\x17\x4d\x5b\x99\xd1\xec\xd4\xab\x1f\xd4\x9b\x1f\x7e\x52\xaf\x5f\x7d\xf7\xd3\x6e\x79\x75\xa5\x86\xee\xae\x2f\xed\x70\x8d\xcf\xa3\x3d\x1c\xf7\x66\xb4\xc3\x55\x77\xb4\xad\x39\x36\xbb\xf1\x70\xdc\x5f\x9e\x39\x98\xa6\xe5\xc3\xcb\xa3\x29\xdf\x9a\x1b\xab\x70\x68\xb9\x5c\x36\x87\x63\xd7\x8f\x6a\xbd\x5c\xac\x8a\xf7\xa3\x1d\x56\xcb\xc5\xaa\xec\x0e\xc7\xde\x0e\xc3\xd5\xcd\x87\xe6\x88\x03\xf5\x61\xc4\xaf\xa6\xe3\xff\xaf\x9a\xee\x6e\x6c\xf6\xf8\xd2\xd1\x80\xa3\x19\x6f\xaf\xea\x66\x6f\xf1\x01\x07\x86\xb1\x6f\xda\x1b\x3a\x37\x36\x07\xbb\x5a\x6e\x96\xcb\xfa\xae\x2d\x95\x78\xf4\xa3\x35\xd5\x1a\x1f\xd4\xcf\xbf\x60\xd9\xad\x6a\xcd\xc1\x2a\x1e\xb6\x51\xeb\xe9\xa8\xed\xfb\xae\xdf\xa8\x8f\xcb\xc5\xcd\x07\xfa\xa6\xae\x5f\x28\x58\xb5\x7b\x63\x7f\xc3\x24\xb6\x5f\x93\xd9\xf8\xfe\xd7\xbb\xba\xb6\x3d\x4d\xbb\xd9\x2c\x17\x4d\x4d\x03\xfe\xed\x85\x6a\x9b\x3d\xa6\x58\xf4\x76\xbc\xeb\x5b\x7c\xdd\xaa\xfa\x30\xee\x5e\x63\xf6\x7a\xbd\xc2\x44\xea\xab\xff\xbb\x56\x5f\xbd\x5b\xb1\x25\xb4\xd6\x66\xb9\xb8\x5f\x2e\x17\xef\x4c\xaf\x8a\xbb\x5a\xf1\x3a\xbc\xc8\x72\xf1\x2b\x9b\xf3\x42\x35\xdd\xee\x65\x77\x7c\xbf\xfe\xba\xb8\xab\xb7\xea\xe6\xc3\x66\xb9\x28\xf7\xaf\x27\x4b\x77\x2f\xf7\xdd\x60\xd7\x9b\xe5\x1f\x65\x0f\xa6\xe1\xf9\x9f\x98\xc8\xf6\x3d\xdb\x2d\x07\x8b\xbb\x7a\xf7\x57\x98\xbe\xde\x6c\x71\xc5\xf2\x7e\xb9\x5c\x8e\xef\x8f\x56\x99\x61\xb0\x23\x62\x7e\x57\x8e\x98\x86\x1c\x94\x84\x2c\x17\x4d\x5b\x77\x4a\x21\xa9\xdf\xb5\x75\xf7\xda\x61\x1c\x0d\x3b\x1d\x52\x4d\x3b\xda\xbe\x36\xa5\xc5\xf0\x6e\xd8\x7d\x2b\xa7\x96\x8b\xef\x5f\xc5\x2f\x6f\x6d\xf9\x76\xb8\x3b\xac\x37\x92\xd7\x79\x06\x01\xc1\x74\xf5\x99\x09\x84\x02\xf9\x27\x83\x16\x43\xf3\x61\x3e\xd6\xb4\x63\x12\x2d\x17\x07\x14\x8b\xfc\x93\x65\xbf\xef\x2a\x4b\x27\x7e\x6a\x64\x0a\x00\x6f\x87\x6f\xcb\xc5\xa1\x8a\x4b\xb1\xe6\xcc\x16\x02\xe4\xba\x6e\x1e\xda\xb3\x51\x6f\xcc\xc1\xce\x66\xc3\x2e\x89\x65\xdd\xec\x60\xe1\xf2\xfe\x99\xb1\x7f\x6b\x3e\x60\x2c\x59\x7a\x39\x14\x8e\x3c\x3b\x14\x3e\xac\x37\xe7\x1e\x5d\x4e\x00\xb7\x3f\x37\x01\x1c\x5e\x6f\x4e\xce\x7f\x32\x03\x45\xe4\xd9\x49\x1e\x49\xdd\x83\x59\x4e\xe1\x7c\x76\xa6\xef\x86\x57\x4d\xbf\xde\xa8\xa2\xeb\xf6\xe7\x33\x98\xfd\xf0\x99\x18\xbe\x1f\x38\x84\x8c\xae\x8f\xf7\x67\xa3\x05\xc2\xa8\xca\x5f\x65\xe0\x4f\x13\xcf\xbd\xec\x0e\x07\xd3\x56\x03\x98\x4e\xbd\x10\x28\x83\xda\xb4\xf3\x6b\xed\xb2\x42\x3b\x2f\xd3\xce\xf3\x1e\xff\xa9\x6b\xed\x4c\xa9\x5d\x9c\x68\x17\x57\xda\x25\xb5\x76\x55\xa1\x5d\x91\x69\xe7\x07\xda\xa5\x95\x76\x79\xa2\x5d\x6a\xb5\x2b\x63\xed\xe2\x48\x3b\x9b\x69\x17\x54\xda\x99\x48\x3b\xbf\xd0\x2e\x4a\xb5\x2b\xec\x4a\x7d\x43\xab\xe2\xaa\xa2\xe2\x19\xbc\x5a\xbb\xd8\x6a\x57\x63\x84\xaf\x5d\x84\xd9\x8c\x76\x41\xa2\x5d\xe4\x69\x97\x87\xda\xa5\x11\xff\xb6\x89\x76\x41\xce\x33\x06\x9e\x76\x59\xa9\x5d\x18\xf3\xea\x59\xae\x5d\x1c\xf0\x8a\x51\xa0\x5d\xe5\x6b\x97\xe4\xda\x15\xc1\xb4\x6a\x16\x68\x57\x63\xa5\x42\xbb\x24\xd0\x2e\xca\xb4\xb3\x46\xbb\x32\xd4\xae\x48\x70\x25\xaf\x9e\xc1\xe7\x98\xe3\x12\xc4\xda\x95\x56\xbb\xd4\xd3\x2e\xb4\xfc\xd9\x2f\xb5\xf3\x71\xcc\xd7\x2e\x34\xda\x65\xb1\x76\x51\xa8\x5d\x1e\xb3\x07\x36\xd2\x2e\xc8\xa6\x55\x63\x5c\x15\x6a\x97\x85\xda\xf9\xb9\x76\x15\x6c\xae\xf9\x7b\x60\xf8\x3c\x56\xce\x03\xed\x6c\xad\x5d\x50\x6b\xe7\x45\xda\x55\xb5\x76\x75\xaa\x9d\x97\x68\x67\x10\xd5\x50\xbb\x30\xd3\xae\x30\x62\x61\xc8\x16\x62\x4c\x8d\xef\x39\xa2\x3e\xad\x5a\x47\xda\xa5\x85\x76\xbe\xd1\x2e\xb2\xda\x99\x94\x7d\x80\xad\xc8\x75\x80\x18\x84\xda\x95\x46\xbb\xc4\x68\x17\x26\xda\xe5\x15\x47\x18\x16\x22\xdf\x55\xc2\x16\xd8\x9c\x23\xea\xc7\xda\x55\x21\x47\x3d\xca\xb5\xcb\xac\x76\x41\xa0\x5d\x98\x4e\xab\x5a\xa0\x24\x87\xf7\xda\x85\x95\x76\x3e\xa2\x59\xf1\xc8\x2c\xe1\x68\xc6\x85\x76\x75\xa9\x5d\x82\x88\xca\xcc\xa5\x2f\x58\x28\x39\x92\xc0\x43\x8e\x3c\x1a\xce\x75\x96\x71\x96\x8c\xa7\x9d\xb1\xda\x65\x3e\xe2\x34\xad\x8a\x98\x63\xb5\x02\xbe\x15\xda\xc5\xb1\x76\x29\x22\x8b\x3c\x65\xda\x25\x19\x23\x0a\xbf\x61\x5d\x9e\x69\x67\x32\x9e\xc9\x03\x4a\x62\x8e\x32\x72\x5f\x00\x65\x82\x38\x1c\x0f\x81\x3c\xc4\x0e\x96\xc2\x8b\x19\xc3\xc8\x36\x45\xb8\xe4\xbc\x64\xa9\x76\x91\xcf\x91\x07\x9a\x2a\xa3\x9d\x49\xd8\x22\xf8\x67\x10\xed\x8a\x2b\x08\x39\x84\x45\x40\x23\xe1\xd6\x68\xe7\xe5\x3c\x67\x54\x73\x96\x90\x99\x22\xe5\x68\xc7\xf1\xb4\x6a\x91\x73\xf4\x50\x2d\x40\xc8\x94\x9b\x0a\x75\x59\x70\x1e\x91\x4f\xd8\x4b\x38\x8c\x19\xe3\xc8\x48\x54\x6a\x57\x06\xda\x15\x12\x45\xeb\x73\x15\x26\x91\x76\x5e\xcc\xe7\x92\x52\x3b\xcf\xf2\xbc\x61\x3e\xad\x8a\xe8\x22\x12\x99\xd8\x9f\xc8\xcc\xb0\x0f\xab\xc6\x35\x57\x7d\x21\x88\x0b\xac\x76\x15\xa2\x16\x70\x84\x4d\xc5\x3f\xa8\x47\xac\x1c\x7b\x5c\x03\x26\x10\x4b\x02\xc6\x7c\x62\xf1\x33\xad\x4a\xb9\x44\x24\x2d\xa3\x03\xf5\x47\xdc\x53\x31\x6f\x55\x18\xe1\x33\x2a\x50\xed\xc0\x2c\x30\x80\x8c\x20\x8f\xc0\x2f\xce\x83\x45\x50\x31\x58\x1d\xac\x92\x02\xc3\x11\x63\x1b\x11\xf7\xc8\xa3\x39\xc2\x21\xd7\x12\x50\xe2\x27\x3c\x33\xb8\x06\x48\xa2\x95\x53\xb6\x15\x75\x0b\x4c\x57\x31\x67\x00\xf5\x58\x05\x5c\x65\x88\x8d\x91\x7a\xf7\x3d\x8e\x38\xac\x8f\x12\x46\x26\x2c\x8f\x89\x75\xe7\x7a\x35\x8c\x04\xcc\x82\x68\x22\xaa\x05\xb8\x04\x28\x4b\x99\x63\x61\x15\xfc\x83\x85\x61\xaa\x9d\x8f\x6b\x53\xc6\x6d\x08\x94\x89\x7f\xa8\x5f\x5b\x31\x87\x11\x3f\x4b\x45\x11\xfb\x80\x17\xfc\xd9\x57\xcc\x66\x79\x45\xaa\x88\x40\xea\x32\x60\x7e\x02\xbe\xc1\x3d\x51\xc4\x8c\x09\xe6\x44\x9e\x81\xcd\x58\x58\x72\xc2\x37\x98\x21\x9a\xae\x97\xca\x43\x55\xa5\x25\x63\xdb\x0b\xa7\x55\x81\x70\x30\x1f\x7a\x08\xf8\x13\x55\x01\x2c\x12\x43\x56\x5c\xf5\x88\x12\xf5\x90\x92\xab\x29\x07\xd6\x11\x31\xc3\xb1\x00\xf7\x22\xda\xc4\xb7\x95\x54\x8b\xe1\x4a\x42\x87\x48\xd0\x45\x4a\x9c\x9f\x23\x5c\x31\x7b\x03\xc3\x53\x77\x82\xdf\x40\x40\x09\x3e\x4a\xb9\x7a\x60\x15\x45\x2a\x64\x8c\x22\x16\xb5\xf0\x6f\x99\x08\xaa\xe0\x67\xc1\x19\x01\x92\xb0\x92\xc9\x19\x95\x40\x5b\x3c\xaf\x6a\x7c\xe9\x83\x01\x57\x40\xe8\x71\xd4\x11\x31\x60\x13\xd1\x07\x3b\xa6\x62\x15\x18\x04\xdc\x8a\x2c\x10\x3b\x18\x8e\x01\x21\x2e\x63\xa6\x21\xfe\x4a\x38\x86\xc0\x0c\xf0\x80\x8a\x34\x33\x4b\x80\x1f\x91\xf1\x22\xe2\x8a\x41\x67\xc6\x08\xc2\x73\xaa\x5d\x95\x71\xb5\xe3\xbb\x27\xb5\x0c\x7f\x51\x41\xc0\x41\x89\x9f\x9a\xd1\x03\xff\x51\xff\x65\xca\x59\x40\xe4\xfd\xa9\x5f\xa1\xf7\xce\xbe\xa2\xbe\x4a\xa0\x3f\xe5\xba\x05\x83\x7b\x01\xf7\x1a\x54\x05\xec\x04\x63\x20\x8f\xf0\x17\x4c\x01\x74\xa0\xfb\xd5\x3e\x47\x1b\xe7\xd1\xaf\xd0\x5b\x42\x9f\xe3\x41\x2c\x93\xb3\x27\xe0\x26\x9f\x6a\x7a\x66\x09\xe9\x74\xa8\x4d\x44\x08\x08\xa8\xb0\x5a\xcd\x33\x60\x55\x44\x11\xd5\x02\xbf\x81\x32\xf8\xe7\x09\xab\x20\x8f\xa8\x26\x30\x21\x75\x84\x8c\xd9\xb0\x90\xbe\x03\xb4\x62\x3e\xf0\x5f\x3a\xf7\x9c\x52\xa2\x64\x53\xee\x7a\x40\x16\x30\x87\x6a\x47\xbe\xb0\x22\x98\x1b\x91\xca\x6a\x46\x18\xea\x19\x08\x81\x42\xc1\x31\xf0\x33\x78\x16\x35\x8c\xac\xd4\xc2\x77\x88\x0b\xac\x23\x46\x4c\xcf\xd9\x9f\x98\x01\xcc\xee\x31\xfb\x27\xe9\x29\xb2\x84\x28\xcb\xd1\xc2\xe7\x34\xe6\x6e\x81\x73\xc8\x08\xfc\x02\xbb\xa3\x7b\x84\xe2\x3b\xd8\x06\x63\x8c\x68\x2a\xe0\x05\x9d\x0f\x8c\x1b\xcf\xec\x0f\xad\x83\x1c\x81\x5f\xc0\x95\x88\x2c\xaa\xbe\x9e\x90\x50\x09\x46\x43\x8e\x3e\xae\x47\xc5\x4c\x35\x58\x4b\x4c\xd0\xd9\xab\x9c\x19\x02\x9c\x64\x6a\x56\x46\xd1\x54\x1b\xe8\x76\xd5\xdc\x5f\x13\xf6\x13\xca\x11\x1a\x8f\xaa\x3f\xe1\xdf\x85\x74\x29\xd8\x0a\x9c\x83\x41\x80\x3c\xf2\x3b\xe7\x3a\x05\xa6\xa1\xa5\x50\xaf\xd0\x9b\xd0\x1a\x58\x05\x9f\x53\x61\x7d\x42\x27\xb8\x7a\x66\x7f\xf4\x7a\xf4\x56\x30\xb6\x95\x5c\x50\x7d\xd5\xa2\x77\x2a\xe6\x5b\x68\x04\xc4\xa0\x10\x9d\x51\x16\x27\xb6\x47\x95\x80\x2d\xd1\xe1\x11\x33\x42\xa2\x28\xb9\x70\xea\x88\xd0\x56\x33\x23\x1a\x23\xd1\x49\x38\x27\x58\x05\xf9\x02\x0b\x22\x37\xa8\x39\xa0\x09\x08\x81\x8a\x2d\x45\x07\xa7\xd2\xed\xe0\x1b\xf0\x8d\x8c\xe4\x39\xd7\x3b\x62\x83\xae\x47\xaa\xae\x16\x1e\xb6\xe7\xdc\x84\x5e\x60\xa5\xa7\x22\x77\xc0\x28\xaa\x1c\x23\x91\x33\xd8\x08\x85\x89\x88\x82\x6b\xe0\xb7\x2f\xb5\x0c\x1f\xe1\x33\x14\x5b\x2e\x9d\x1c\x78\xae\x13\xb6\xae\x94\x2a\x34\xd2\xab\xe3\x59\x85\x83\xe5\x6a\xd1\x07\xb1\xf4\x11\xd4\x29\xa9\xec\x98\x79\x07\xdc\x04\x16\x20\x2d\x15\xb1\xb6\x0a\x45\x5b\x21\xf2\x54\x69\x39\x5f\x0b\x6c\xc3\x5a\x60\x36\xb7\xdc\x77\x22\xd1\x98\xfe\x8c\x26\x74\x2d\xf4\x9a\x50\xec\xca\xc5\x47\x20\x06\x51\x85\xaf\xd0\xc8\xc0\xb3\x11\x76\x43\x24\x63\xd1\x80\x40\x22\x72\x0b\x4d\x88\x88\xd6\xa2\x9f\x71\x1e\x78\x06\x6e\xc0\x3e\xe8\x4f\x45\x32\xb3\x84\xa7\x5d\x9a\x9d\x70\x87\x5e\x41\x79\x0d\xa4\xea\x6b\xc6\xb6\x27\xea\x15\x6c\x02\x4c\x62\x0c\x7a\x8b\x91\xae\x07\x2e\x02\x1a\x89\x15\x33\x5e\x39\x17\xf5\x46\xea\x17\x1c\x36\xb3\x44\x5a\xf3\x11\x74\x01\xf0\x0c\xfa\x09\x31\xb7\xe1\x3d\x4f\x19\x71\xc5\xa0\x06\x81\x1a\xf0\x0c\x70\x4e\x79\x32\xdc\x11\x43\x44\x2f\x62\x74\x51\x47\xcf\x19\x89\x60\x59\xd4\x2c\x62\x02\x5e\x8f\x4e\xdc\x24\x3b\x22\xaa\x66\xc3\x1a\x00\xd1\x09\x22\xde\x41\xa2\xa3\x51\x0d\x8b\xba\x01\xfa\x28\xd7\x21\xe7\x0e\xb3\x83\x35\x81\x65\x28\x75\xe0\x35\x92\xfd\x21\xd8\x07\x2c\x0b\x25\x84\xcf\xa1\x99\x15\x8c\x68\x03\xb0\x1e\x14\x37\x22\x05\x45\x86\xc8\x16\xb2\xc3\xc8\x65\x37\x88\xbc\x01\xaf\xb4\xf7\x89\x18\x41\xd0\xc6\x50\x74\xe8\xee\xe0\xaa\x58\x58\x91\x7a\x54\xc8\x28\xf2\x64\x4f\x78\x52\x30\xb1\xec\x5d\xb1\x02\x94\x1b\x2a\xa1\x94\xdc\x22\x9a\xb5\xe8\xc4\xbc\x10\x0c\x04\x8c\x2c\xe0\x12\xab\xa4\xd2\x73\x11\x5d\xd4\x2a\xfa\x2b\x30\x8d\x5e\x04\x9f\xa1\x6c\xd0\xab\x10\xc7\x7a\xee\x39\xb0\x27\x12\x54\xe0\x6a\xd8\x35\xa9\x2b\xac\x84\x5e\xc9\xcc\x2d\x2a\xbb\xe0\xb8\x60\x1c\x14\x39\xba\x3b\xd4\x09\x62\x06\x15\x44\x78\x90\x9e\xed\xa5\x5c\x39\xa8\x7f\x78\xe4\xcf\x79\x45\xde\x02\x61\xfc\x7c\xda\x9b\xc5\xcc\x6e\xf0\xa7\x90\x1d\x21\xf4\x2e\x21\xaf\x62\x9d\x9b\xcb\x7e\xc7\xca\x6e\x11\xcc\x57\xca\x7e\x9d\x56\xf2\x78\xce\xa9\x57\x83\x1d\xeb\x62\xce\x6b\xca\xb8\x43\x84\x30\x2a\x08\x19\x15\x60\x86\x49\xdb\x82\x87\xc8\x9f\x92\x99\x21\xf7\x98\x6f\x89\x09\x13\xee\xde\xb9\xec\x4c\xea\x49\x17\xd7\xdc\x15\xa9\xfa\x44\x6f\x7b\x33\xfb\xc7\x82\xd1\x3c\x91\x6e\x2c\xbd\x1f\x33\x83\x83\x90\x1f\x20\x06\x28\x42\x15\x80\xb3\x6a\x51\x67\xb0\x1f\x5c\x45\xfb\x04\xa9\x4d\xb0\x4a\x2e\x55\x03\xee\x4d\x12\xd6\xd2\xe8\x00\xd5\x49\x4b\x54\x9c\xbb\x54\x70\x4a\x35\x1b\xb2\x12\x43\x1d\x12\x3a\x12\xde\x6d\x40\xef\x81\x01\x28\xa2\x52\x49\xd0\xcc\x46\xba\x07\x8e\xd3\xde\x37\x91\xbd\x83\x2f\x68\xab\xd8\xdf\x62\x66\x44\x44\x0e\x6a\x94\x14\x75\xc0\x15\x1d\xc9\xde\x05\x5c\x44\x4c\x99\xca\xfd\x16\x9f\x35\x11\xce\xa1\x53\x60\x27\xec\x8b\x62\x25\x46\xc8\x78\x17\x46\x7b\x60\xc3\x6c\x02\x86\x4d\xa4\x3a\x83\xb9\x5e\xe1\x1b\xf6\x28\xa8\x1c\x28\x6d\x5c\x8d\xfa\x8c\x45\x27\x01\x5d\xb3\x86\x17\x6d\xe8\xc9\xfe\x00\xe3\x32\xd9\x29\x96\x13\xee\x43\x8e\x30\xd0\x04\xa5\x86\xaa\x8c\x85\xcf\xa2\x59\xc1\xd0\x4e\x21\xe5\xfe\x00\xb4\xf8\x72\xe7\x23\x97\x3e\x19\x88\x05\xb9\xf8\x45\x4c\x10\x31\x93\x80\x67\xc1\x4b\xa9\xec\xb0\xa0\x6e\x22\xd9\x99\xa1\x1b\x00\x33\xa8\xfb\x58\xee\x92\x79\xe5\x7c\x5f\xa2\x14\x4d\x90\xb2\x66\x47\x54\xc1\x23\x84\x92\x98\x73\x0d\xdf\xc0\x90\x60\xc1\x69\xd7\x4f\x59\x91\x9a\x25\xdf\xcd\xe9\xce\x09\xaa\x91\xf6\xfa\x25\xeb\xc8\x3a\x60\x6f\x8a\x0b\xdd\xe4\x89\x9e\x87\xfd\x99\xec\x12\xc0\x27\xe0\xe3\x5a\xf4\x21\x2a\x01\xf5\x4b\x5a\xa1\xe0\xd9\xe1\x17\xb8\x0d\x55\x87\xcf\xb0\x1c\x55\x87\x39\x50\x8d\x60\xcd\x6c\xd2\x55\x88\xcf\x7c\xe7\x07\xd8\x43\x87\xa2\xbd\x9b\xc7\xab\xf9\xa2\x0b\xad\x30\x3b\xb4\x92\x27\x11\x86\x25\x98\x01\x3b\x90\x09\x79\x54\x71\x99\x5c\x1f\x70\xec\xa0\xd6\xc1\xeb\xc0\x7a\x29\xbd\x37\x9a\x2b\x07\xb5\x09\x7b\x03\xb9\x73\x51\x88\x7a\x01\xea\x61\x2f\x55\x78\xc1\xf6\x82\xf5\x33\xb9\xbf\x82\x9a\x8d\x85\x9b\xfc\xf4\x84\xff\x5c\x98\x10\x7c\x9e\x89\xfe\x87\x3e\x26\x65\x34\xef\xd5\x93\x88\x99\x0e\xb9\xc0\xe8\x48\xee\x40\x02\x19\x9e\xb0\x47\x2c\x8a\x85\xf6\x2a\x52\xb7\xd3\xdd\x30\xd2\x85\x1e\xe3\x1e\xc7\x51\x81\xe1\xa4\x4c\x13\xe6\x77\x20\x13\x9c\x57\x9e\x74\x93\xc7\x18\x4d\xe5\xbe\x26\xdd\xc9\xac\x99\x3b\xa1\xfb\xc0\x2b\x50\x30\x89\xa0\x1f\x58\x25\x56\x94\xee\x48\x3b\x09\x59\x8d\xee\xd2\x8a\x5f\xe8\x0e\x88\x03\x38\x3c\x91\x6a\xaa\xe6\x55\xc1\x00\x40\x3a\x66\x44\x44\x90\x0b\xaa\xd1\x94\x6d\x45\x9e\xa2\xe9\x2e\x49\xcd\x33\xe0\x78\x6c\xb8\xcf\x10\x6a\x3c\xee\x8e\x60\x07\x64\x21\x94\xcf\x60\x5a\xe0\xdd\x08\xaf\x07\x73\xcf\xb1\x72\xef\x0c\xf6\x41\x59\xa1\x22\xa0\x27\x52\xd1\x86\x81\x61\xdf\xc1\x3f\x60\x01\x74\x04\xda\xab\x8b\x32\x05\x0b\xd0\x8e\x4b\x34\x65\x2c\xf8\x06\xf6\x8d\xdc\xd9\x8b\x7d\x66\xd9\x6c\xc6\x30\xea\x12\xb3\x20\x6a\xd0\xba\xd8\x07\xc0\xcf\x87\xf7\xc2\xf1\x13\x64\xcc\x24\xa8\x45\x54\x1a\xb4\x2f\x94\x0a\x5f\xb7\x7a\xf0\x5c\xef\xd1\x3b\xf1\xf2\xf4\xe9\xb1\xa7\x7a\xd3\x33\xaa\xb3\xa7\x82\xcb\xc5\xe2\xd9\xfb\xfa\xdb\xe5\x62\xb1\x7a\xfc\x99\xe7\x6a\xbb\x5c\x6c\xe8\xf9\xd6\xe7\x8d\x82\x3d\x7f\xa2\x27\x60\xe7\xf6\xd0\x23\xb0\xf9\x41\xe3\x17\x38\xf5\xb9\xc7\x7a\xf3\xd3\x38\x7a\x9c\x76\x9a\x73\x7a\xd6\x81\xeb\x5b\x73\xb0\xd7\xea\x19\x9f\xe8\x11\xd8\xb5\x8a\xbc\x24\xc3\xb7\xb3\xc7\x2f\xd7\x6a\x45\x17\x1c\xba\xca\x5e\x9f\x3f\x38\x5a\x47\x81\xb7\x91\x33\x3f\x35\x98\x9f\x9e\x08\xfd\x4f\xdb\xb8\xb5\x1f\xc7\xbe\x17\xe6\xb1\x17\x6c\x15\x5d\x04\xfb\x0c\x8c\xfb\x9a\x02\xf2\x91\xa2\x70\xad\x24\x18\xb0\xfc\x9a\xfe\x3f\x7b\xaa\x68\xb6\xcf\x3e\x88\xf9\xde\x34\xed\x3f\xf0\x10\x06\x25\x9e\x49\xfb\x01\x75\xa3\x69\x44\xb2\x31\xc9\x64\xeb\x04\xe1\x5f\xc8\x06\xb4\x94\x1b\x4a\xbe\xdc\xf4\x85\x48\x4c\xe7\x56\x6c\xa7\x9b\xb2\x72\x33\x24\x16\x89\x08\xd2\x4b\xa5\xa1\x61\xdb\x4a\x0f\x5e\x2a\x2e\x63\x94\x36\x9a\x7a\x25\xed\x39\x92\xd6\x04\xf8\x17\xd2\x50\x50\x9c\x56\x64\x1a\x44\x10\x8a\xae\xf6\xcf\x6f\x26\x80\x28\x20\xcc\xa9\x84\x63\xde\xf2\x24\x93\x50\x29\xd9\x5f\xb4\xa0\xe9\x91\x0f\x48\x86\x1e\xf3\x64\x3c\x7b\x2a\xc2\x1e\xfe\xe6\xf5\xe9\x96\x1c\x2c\x42\x2b\x43\xab\x8f\x88\xce\xe6\x56\x9c\xf1\x56\x37\x95\x8d\x07\xa4\x60\x62\xb8\x71\xd0\xe6\x3a\x97\xdb\xac\x96\x7d\xa1\xa6\xe2\xf1\xed\x3b\x2b\xb7\x73\xac\xdc\xfc\x23\x99\x22\x0d\x12\x6d\x1a\xa4\x03\xb2\x81\xcf\x49\x7d\xbe\x2a\xa8\x27\x93\x1b\x05\x90\x85\xa1\x6c\x65\xe8\xe6\x57\xc2\x0d\x1e\x42\xb6\x12\xa9\x88\xd8\xc4\xf2\x30\xc2\xb3\xa7\x71\x24\xfc\xa5\x91\x82\xba\x23\x91\x67\xb0\x10\x79\x86\xb0\x08\x66\xd9\x81\x7c\xd2\xad\x14\xd9\xc6\xd0\x0d\xb1\x8a\xbf\x87\xb2\x0d\x82\xfd\xc8\x37\x44\xec\xb4\x8d\x40\x0b\xaa\xe5\xd6\x39\x36\xdf\xb0\x0e\x84\x5b\xcb\x4d\x33\x48\x0d\xd0\x78\x20\x0f\x26\x40\xd2\xd9\xec\x2b\x11\x61\xc1\x5b\x1f\x34\x40\x63\x4f\x1b\x27\xb4\x2b\xd0\x6f\x2a\x8f\xbe\xb0\x52\x2e\x92\x18\x48\xb3\x92\xb7\x52\x36\x9d\xa9\xe4\x19\x12\x92\x1e\xe3\x15\xf2\xd0\xc9\xf2\xe6\xc4\x9b\x85\x1d\x21\x20\xe2\x66\x57\xca\x03\x34\x34\x41\xf8\x0f\xf1\x43\xd1\x29\xb8\xed\xd0\xed\xf3\x9c\x05\x5b\x25\x37\x8c\x3c\x91\x16\x10\xe4\x0f\x29\x1e\xad\x0f\x82\x00\x62\xb0\x88\xce\x6f\xd6\x9f\xae\x7e\x92\xe8\xa7\x4a\xff\xc7\x49\x7e\x9a\xe9\x01\xc1\xcf\xaf\xae\x7c\x8e\xdd\xa7\xf1\xbf\x87\xd9\x1f\x78\xf1\x4f\x61\xf5\x0b\x47\x84\xd2\x83\x24\xfa\x63\x18\x3d\xcc\xa2\x28\x4b\xa3\xfc\x8f\x60\xf4\xe5\xd5\xd5\xf2\xea\x4a\xfd\x85\x5e\x0f\xd9\x77\xa6\x1a\x94\x69\x2b\xc5\xd7\x0d\x6a\xbc\x9d\x5e\x1d\xa9\xbb\x9e\xbe\xdd\x34\xef\x6c\x4b\xef\xa9\xd0\xcb\x49\xdf\x8d\xf3\xb5\xa6\xe5\x14\xa8\xa6\x3e\x1b\x57\x76\x77\xfb\x4a\xb5\xdd\xa8\x0a\xab\xea\xee\xae\xad\x54\xd7\x63\xe4\xc5\x09\xac\x6c\x2b\xcc\xc8\xf9\x26\x7b\xd6\x9f\x7b\x4f\xa8\x34\x6d\xdb\xb5\x4d\x69\xf6\x6f\x70\xe5\xf5\x0b\xb9\x78\xd8\xfd\x68\x8f\x7b\x53\xda\x35\xbf\x4f\xb3\xd2\x7a\xb5\x55\xab\xab\xd5\x56\xfd\xd9\xe7\x84\xd7\x5b\xd5\xbd\xc5\x88\x09\x9a\x3f\x5f\x4e\xf6\xcb\x7f\xe0\x3c\x72\x6b\x66\x20\xd5\x00\xcb\x23\x68\x79\xf2\xdd\x1e\x8e\xea\x57\x83\x2a\x4d\xfb\xef\x08\x94\xa1\x97\xbd\xc8\x81\x47\x5e\xf8\x59\xdc\x9f\xa0\x67\x76\x92\x3f\xe4\x09\x27\xce\xd7\xf8\xba\x1b\x76\xff\x6d\xc6\x5b\x5a\xe7\xe3\x0f\xc7\x6b\xb5\x82\x8c\x58\x6d\x15\x8e\x5e\xcb\xa4\xaf\xfb\x9e\x40\xf5\xba\xef\xdf\x74\xe3\x6b\xd7\x0c\xe3\x3d\x52\xce\x19\xff\xfe\x6e\x18\xd9\xbe\x66\x50\xfb\xe6\xad\x15\x0c\x14\x77\xa3\x3a\x9a\xb6\x29\x07\xf5\xdb\xad\x6d\xe5\xe8\x6f\x94\xac\xc9\x36\x49\xf4\x04\x80\xa1\x39\x1c\xf7\x4d\xdd\xd8\x41\x0d\xa6\xb6\xaa\x69\x9b\xb1\x31\xfb\xe6\x83\x19\x9b\xae\x55\x5d\xad\x6e\xf6\x5d\x61\xf6\xea\x9d\xe9\x1b\x53\xec\xed\x40\x23\xdb\x6e\xdf\xb4\xe3\xb5\xaa\xac\xa9\xca\xae\xb2\x73\xf2\x67\xd3\x2e\x01\xc0\xf9\x47\xc4\x4f\x29\x39\x5d\xf6\x68\x1d\x93\x23\xeb\x15\x21\xf1\x5a\x2e\x5e\xa9\x6f\xf8\x05\xb4\x6f\xd4\x6a\x73\xad\xf0\xd5\xf6\x3d\xe7\x6c\xbd\xd9\x5c\xbc\x4f\x65\x4e\xf1\xa2\xc1\xf4\x06\xd3\x73\x55\x42\x1c\xf1\x87\x96\xca\x17\xd4\x09\xac\x7a\x50\x2b\x67\xef\x67\xfd\xcb\x15\x0c\x05\xf9\x77\x16\x4d\x43\x0e\xff\xb3\x6a\x86\xcc\x83\xb3\xc3\x45\xea\x5b\x3a\xd2\x9d\xa5\xf2\x33\x00\x3f\xcd\xb3\x06\xac\x4f\xaf\x5d\xf1\x4c\xd7\x2f\xd4\xc1\xbc\xb5\xeb\xe9\xcc\x56\x79\x5b\xb5\xb7\xed\x7a\x0a\x3d\x50\x0a\x90\xb5\x92\xc4\xde\xb4\x37\x76\x4e\x8c\x9a\x3a\xd2\xa0\x5e\x28\x73\x3c\xda\xb6\xa2\xb4\x0e\x1c\xb8\xcd\x45\x68\x70\xfc\xe4\xe0\x3c\x45\x33\x28\xa3\x46\xd4\xea\x56\xdd\x76\xfb\x0a\xf6\x59\x53\xde\x0a\x52\xe5\xdd\xd5\xae\xdf\xaa\x03\x56\xa8\xd4\xd8\xa9\x66\x1c\x66\xb0\x5f\xec\x14\x14\xfc\x39\xfe\xcc\xce\xfc\x82\x08\x7c\xda\xb6\x3f\x2e\x9f\xdc\xe8\x5d\x3f\xbb\x37\xdb\x2e\x1f\x17\x10\xd7\xf4\x5e\xe0\xd3\xba\xe3\x32\xa9\xaf\x9a\xfe\x22\xa5\x75\xb3\x9f\xf2\x5a\xd8\x7d\xf7\x9b\x32\xaa\xb4\xfd\x68\x9a\x16\x43\xaa\xa6\xb7\xe5\xd8\xf5\xef\x95\x3d\x14\xb6\xaa\x6c\xa5\x9a\xf6\x34\xee\xf2\x7d\x5e\x0c\xf8\xb6\xeb\x95\x75\xe6\x70\xdc\x5b\x94\xfc\xfb\xee\x4e\xf5\x77\xed\xd9\x55\xaa\x6b\x15\x7e\x5f\xed\x76\x3b\xa2\x16\x3a\x58\x76\x2d\x96\x24\x93\x30\x4d\xdd\xed\xf7\xdd\x6f\xc8\xc5\x6d\x63\x7b\xd3\x97\xb7\xef\xe9\xad\x60\xfc\xa3\xd1\xd3\x17\xa5\xea\xae\xdb\x8d\x6e\x3c\x1d\x68\x0e\x37\x67\xa7\x95\x32\xbb\x63\x7b\x73\x7e\xa0\x98\x0e\x8c\x33\xed\xbf\x6a\xfa\xf5\x0a\x13\xaf\x36\x97\x1d\x60\x42\xe6\xc7\x95\xac\x03\xb6\x68\x0e\x37\xab\xfb\xf3\x88\xf2\xd8\x2b\x1c\x7f\x72\x3c\x99\x81\xd1\xb4\xfc\xc3\xf1\xd3\xec\x1b\x8a\xc9\xe9\x78\xdb\x8d\x16\xb5\xf9\x70\xde\x89\x57\x2f\x67\xc1\x55\xcd\x7e\xff\xe9\xe2\xe4\xda\xfd\x03\x36\xc5\x90\x87\xc2\x63\xaa\xc3\x13\x93\xb6\x5d\x65\x27\x36\x1c\x7b\x6b\x89\x23\x51\xa3\x54\x62\x20\x3b\x8f\xea\xf0\xf7\x32\xee\xe2\x68\xc6\xdb\xff\x6a\x86\xf1\x7c\xc8\xdf\x8e\xfb\x66\x5c\x5f\x4e\x49\x83\x30\x00\x84\xf0\xeb\x56\x1d\x4f\x84\x30\x4f\x41\x9c\x4b\x16\xbf\x50\xf8\xb5\x7b\x79\xdb\xec\xab\xde\xb6\x3f\x1f\x7f\xc1\xa9\xa6\x56\x7c\xf6\x8c\xa2\x9f\x21\x4f\x3a\xbd\x38\xa3\x50\x3e\x70\xc6\xa3\x7c\xe0\x11\x32\xe5\x33\xa0\x6c\xfa\xef\x7e\x7a\xcb\x99\xac\xfa\x16\x39\x78\x42\x85\x7f\x6a\xc1\x83\xf5\x1f\xac\xfe\xc4\xda\xbc\x60\xff\xee\x69\x8e\xbd\x88\xcf\x44\xb4\x25\xbe\xbf\xb9\x60\xdb\x8b\xeb\xd8\xdc\x77\x27\xbe\xed\xdf\x6d\x4f\x83\x2e\x18\x17\x67\x2e\xde\xcc\x16\x00\x9d\xbd\x18\x4d\x71\xa0\x22\x7e\x94\x2a\x97\x8b\x79\xd9\x33\x5a\xfd\xd3\x04\xc4\xb3\xdb\x34\x34\xef\x0b\xf5\xb5\x7c\xfc\x88\x89\xaf\x39\x9e\xd3\x14\xd7\x8f\xcd\x71\x41\xc6\xab\x6b\xf5\xf7\x0c\x5c\xac\x1e\x90\xb7\x0c\x7e\x96\xc3\x3f\x33\xeb\xfd\x3d\xed\x13\xcf\xc9\xfd\x89\x59\x67\x7e\xff\x92\x19\xf1\xdf\x3d\xf5\x01\xf5\xa3\x1d\xc6\xae\xb7\x2c\x76\x7b\xfe\x42\x32\x8d\xfb\xdd\x5d\x5b\xd9\x73\x4d\x37\x37\x00\xe6\x8d\xf3\xd1\xeb\xaa\xe9\x1f\xfc\x85\x03\x4b\xbd\x8f\xcb\x05\x4c\xfd\x52\xe9\x2a\x70\x91\xdd\xe7\xa2\x99\x94\xdc\x3c\x74\x56\x7d\x5f\x32\x9c\xff\x7c\xa1\x1b\x76\xdf\xbf\xad\x9a\xfe\x2f\xfb\xfd\xfa\x57\xb4\x2a\x14\x0d\x1b\x3c\xfd\x41\xc7\x6e\xa2\xbf\xcd\x66\x7b\xb1\x23\xf5\xd2\x38\x7e\xf6\x2f\x2d\x2e\x97\xe2\xbf\x1a\xd9\xfd\x6f\xdf\x8c\x16\x73\x3c\x5c\x8f\x96\xd8\x2a\x8e\x08\x9c\xdb\xf1\x0b\xf1\x5f\xb2\x82\x7c\xed\x86\xdd\xcb\x5b\xec\x8b\x87\x27\x26\x9f\xa6\xe5\xd7\xe4\x1f\x7e\xdf\x2c\x3f\x4d\xfd\xf0\xf7\xe4\x5e\xf5\xb6\xbc\xeb\x87\xe6\x9d\xdd\x3f\x82\x83\xe1\x39\x20\x94\x02\xce\xcb\x8c\xce\xa1\x5f\x2e\xa0\x19\x9a\xbd\x7d\x26\x18\x8f\x63\x8e\xa9\xe6\xea\x4a\xbd\x6a\xfa\xe5\xd4\x12\x68\xb5\x13\x73\x95\xe7\xa4\xc5\xd9\x7a\xc4\xf0\x19\x10\xff\xd9\x35\xad\x34\x29\x1a\xb9\x79\x5e\xd3\x53\x92\x26\x9e\xbd\x78\x8b\x9f\x42\xf4\x48\xa6\xe6\xf0\x9c\x74\xf0\xef\xed\x9a\xf3\x9f\x2d\x9c\xdb\x2e\x94\x3c\xb7\xfd\xaa\xe9\xef\xb7\x5f\xd0\x53\x77\xbb\x1d\xfd\x2c\xef\x97\xff\x1f\x00\x00\xff\xff\x3d\x8d\xf9\xe5\xb4\x35\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 13748, mode: os.FileMode(0644), modTime: time.Unix(1552561090, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x7e, 0x12, 0xc0, 0x32, 0xbd, 0x1c, 0xca, 0xb3, 0x4b, 0x52, 0x1e, 0x79, 0xbb, 0xda, 0x2c, 0x1a, 0x78, 0x2e, 0x8c, 0xff, 0xb6, 0xda, 0xe8, 0xb3, 0xec, 0x58, 0x6a, 0x19, 0xe3, 0xed, 0xcc}}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc4\x30\x14\x84\xcf\x79\xbf\xe2\xd1\x83\xb4\xe0\x26\xeb\xb5\xb7\x45\x7b\xf0\xe2\x8a\x88\xf7\x98\xbe\xa6\x4f\x9b\x97\x90\xa6\xcb\x42\xe9\x7f\x97\xae\x88\xb7\x99\xf9\x98\x61\x92\x75\xdf\xd6\x13\x06\xcb\x02\xc0\x21\xc5\x5c\xb0\x06\x55\x79\x2e\xe3\xf2\xa9\x5d\x0c\x26\xd8\x5c\x58\x46\xfa\x32\x31\x91\xd8\xc4\x07\x37\xf1\xc1\x93\x50\xb6\x25\x66\xe3\x26\xae\xa0\x01\x18\x16\x71\xb7\xa1\xba\xc1\x15\x94\x9b\x58\x3f\x0b\x97\xfa\x6e\x57\x8f\x51\x06\xf6\x2b\x28\x75\x4a\xe9\xc5\x06\x6a\x11\xb1\x5a\x57\xd4\xbb\xc1\x6d\xab\xee\x41\xa9\x4e\x2e\xaf\x99\x06\xbe\xb6\xff\xac\x93\xcb\x1f\xfe\xa0\x3c\x73\x94\x5b\xf5\x41\x1f\xf5\x71\x4f\xb7\x06\x40\x19\x83\xef\xe7\xa7\x73\x8b\xa7\xbe\xc7\x4c\x9e\xe7\x42\x19\x5d\x0c\xc1\x4a\x3f\xe3\x48\x99\x34\xfc\x7e\x7a\x8b\xb1\xe8\xee\x4a\x6e\x29\x54\x37\xb0\xc1\x4f\x00\x00\x00\xff\xff\xf6\xdc\xdf\x53\x04\x01\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.tmpl", size: 260, mode: os.FileMode(0644), modTime: time.Unix(1551788743, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0x11, 0x2c, 0x99, 0x18, 0x2a, 0x34, 0xd9, 0xfd, 0x46, 0x4d, 0x94, 0x1d, 0x49, 0x6c, 0xb0, 0x33, 0xdc, 0x3b, 0x1e, 0x45, 0x2b, 0xc9, 0x17, 0xb, 0xdb, 0xc2, 0xd2, 0xb6, 0x8d, 0x34, 0x60}}
	return a, nil
}

var _templatesOpenapiTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\xb6\x13\x7f\x96\xfe\x8a\xab\xd0\x6f\x21\x7d\xe3\xc8\x2b\x36\xec\xc1\x83\x1f\xd2\xa4\x69\x02\x34\x49\x97\x34\x4f\x59\x80\x30\xd6\x59\xe6\x4a\x91\x0a\x45\xa7\xc9\x04\xfd\xef\xc3\x91\xd4\x0f\xdb\xca\x96\x02\xf3\x8b\x25\xde\xf1\xee\x73\x9f\xfb\xf0\xc4\xe9\x14\x0e\x55\x86\x90\xa3\x44\xcd\x0c\x66\x70\xff\x0c\xaa\x44\xc9\x4a\xbe\xbf\x10\x7c\xdf\x1b\x94\x4e\xe1\xe8\x02\xce\x2f\xbe\xc2\xc7\xa3\xd3\xaf\x69\x38\x9d\xc2\x15\x22\xac\x8c\x29\xab\xd9\x74\x9a\x73\xb3\x5a\xdf\xa7\x0b\x55\x4c\x33\x26\x39\x8a\xdc\xb0\x67\xa1\xf4\x74\x34\x56\x18\x96\x6c\xf1\x8d\xe5\x08\x05\xe3\x32\x0c\x79\x51\x2a\x6d\x20\x0e\x83\xba\x06\xbe\x84\xf4\xd4\x2e\x54\xe9\x71\x61\xa0\x69\xa2\x65\x61\xa2\xba\x06\x94\x19\x34\xcd\x8e\xd3\x95\xd1\x5c\xe6\x15\x39\x56\xee\x71\xe0\x1c\x06\xd1\x00\x5b\xc1\xb4\xe1\x72\x85\x7f\x8e\xe3\x9a\x2e\x04\x8f\x36\x77\xe8\x6a\xfa\x17\x6a\x25\x54\x3e\x15\x2a\xdf\x32\x56\xe5\xf2\xfd\xcf\xd3\x85\xba\xd7\x6c\xd4\xf2\xc8\x4b\xd4\x51\x98\x84\x61\x5d\xc3\x5b\xc9\x0a\x84\xd9\x1c\xd2\x73\x7a\x68\x1a\xbb\xc8\x4a\x6e\xd7\x3e\xa9\x76\x35\x5c\xae\xe5\x02\x5a\x5b\xd3\x5c\xa1\x7e\x44\x5d\xc5\x09\xdc\xdc\x16\xac\xbc\x71\x35\xde\xba\x3f\xa8\xc3\x40\xa3\x59\x6b\x39\x66\xad\xc3\x80\xc8\xd2\x4c\xe6\x08\x6f\x2b\x1b\xc8\x66\xf3\x31\x2d\x9b\x41\x30\xba\x2f\x08\xa2\x0c\xab\x85\xe6\xa5\xe1\x4a\x46\x33\x20\x52\x7d\x8c\xf4\xa8\xb7\x10\xed\x13\xe7\xbf\xd6\x62\xcb\xef\xfa\xf2\x73\x67\x6f\x26\x0e\x4d\xdb\xc5\x26\xdc\xad\xf5\x12\x73\x5e\x19\xd4\x71\xb5\xbe\x5f\xa8\xa2\x60\x32\x83\x7b\xa5\x44\x62\xeb\x54\xca\x10\xfa\x85\xe0\xe9\xa5\x52\x26\x0c\x03\xbe\x84\x81\x27\xc1\xb6\x4e\x73\x78\x67\x9b\x92\x1e\x3a\x8b\xad\xe7\xba\x42\x0f\x4e\x3a\xa6\x1d\xac\xab\x95\xd2\xc6\x19\xd2\xaf\xdc\x88\xde\xf2\x59\xc9\x7c\x66\xb3\x9d\x31\xfd\x2d\x53\xdf\x65\x6c\xbd\xb6\x8a\x4f\xc8\x99\xea\x01\x14\x15\x5a\x10\x2d\xc2\xd4\x06\x87\xf9\x56\xf4\xa1\x07\x25\x81\xf9\x2b\xb2\x10\x61\xe1\xa0\x9b\xaa\x24\xcd\x92\x95\x1a\x7a\xd1\xbe\xf9\x9e\x5a\x5e\x63\x4b\x5b\x10\x94\x4c\xb3\xa2\x22\x3f\x2b\xc8\xf4\x1c\xbf\xc7\x49\x48\x96\x47\xa6\x01\x9f\x58\x51\x0a\xac\xc0\xf5\xde\xae\xf7\x69\xf0\xc9\xc6\xff\xd8\x3a\x39\xc5\x04\xdd\xa6\xbd\x39\x44\x00\x11\xec\x75\x6d\x69\x49\xff\xc2\xcc\x2a\x4e\x60\x0f\x22\xdb\xe0\x0e\x6f\x7a\x5d\x11\x0b\x76\x11\x9f\xa0\x69\xfe\x90\x91\xcf\xd9\x9d\xd9\x20\x58\x14\x19\x25\x1e\xe9\x63\xdf\x48\x1f\xc9\xcb\xaf\xae\xf7\xed\x58\x38\x10\x9c\x55\x3d\xd2\xc0\xbf\xcf\xe0\x66\x43\xdd\x6e\x83\xab\x72\x67\x4f\x10\xd8\xf8\x7d\x70\xe7\xdd\x4a\x37\x68\xe5\xbc\xb3\x3c\x54\x93\x6b\x7e\x17\xe2\x25\x39\x59\x05\xb4\x3a\xea\xcb\x38\xe1\x59\x86\xb2\x4b\xe7\x5e\x67\xc4\x5a\x6f\x1a\x85\xe0\x5b\x35\xeb\x1a\xeb\xbc\x0e\x74\x5e\xcd\xc0\xd1\x79\xc6\x25\x2f\xd6\xc5\x39\xad\xc5\x75\x0d\x02\x25\xa4\x97\xf8\xb0\xe6\x1a\xb3\x2f\x4e\x2d\x4d\xe3\x01\x5d\xae\xe5\x0c\x48\x4f\x31\xf5\xe4\xff\x1b\x0d\x99\x00\xd3\x79\xd5\x31\xeb\xf5\x16\x04\xfd\xa8\x71\x8a\xfb\x84\xc6\x4d\xe9\x38\x72\x26\xd2\x33\xfd\xe8\x00\x3b\xdf\xf9\x1c\xa2\xa8\xdd\xdf\x06\x98\x8f\xcd\xc1\x9b\x2e\xe6\xa9\x34\x6d\xc0\x7d\x2e\x33\x7c\x8a\x92\xdb\x1b\x3b\x86\x6e\x7d\x93\x42\xf7\xbf\xd6\x82\xc0\x38\xd7\x3d\x4b\x3b\xc9\xd3\x1e\xc6\xd0\xb7\xb7\x55\x3c\x9f\xc0\x5b\x7b\x62\xac\xf0\x77\x58\xe9\xe4\x40\x5d\xc2\x07\xef\x9b\x9e\x4a\x88\x4a\x66\x56\xd1\x40\x43\x94\x75\xee\x8f\x55\x95\x5e\x62\x29\xd8\x02\xe3\xb5\x16\x13\x12\xc8\x5d\x7d\xd7\x34\x54\x9e\x0b\xe0\xc7\x7f\x5d\xdf\x35\x77\xa4\x19\xcb\xec\x0d\xd9\xa9\xf8\xdb\x09\xbc\x4f\xfa\xd4\x43\x21\x6e\x9e\x9b\x20\xd0\xf8\xd0\x4e\xc9\x43\xc1\x51\x9a\x94\xca\x3d\x43\xb3\x52\xe4\x15\x27\x34\x95\x09\x45\xf2\x1f\x96\xfe\xb0\x46\xfd\x3c\xac\x9d\x50\xcc\x41\xe3\x43\x7a\x90\x65\xbf\x93\xd5\xa9\xfd\xbc\x9d\xbd\x5b\xf5\x0d\x8b\xa3\x31\xba\x93\x61\x85\x2c\x43\xfd\x62\x8a\x13\x6b\x7e\x7d\x8e\x7f\x20\x70\x30\x17\x2e\xec\xfc\x65\x62\x84\x82\xfe\x8b\x4d\x64\xb9\x11\x4b\x9a\x74\x10\x0e\x3f\x9f\xb6\x28\x92\x34\xb6\xd3\xff\xb9\xa4\xd7\x16\x03\x5f\xc2\x66\x90\x37\x56\xeb\xd6\xed\x9c\x0b\x3b\x20\xdb\x42\xfd\x48\xc0\x07\x18\xe7\xfa\x15\x64\x2f\x0b\x93\x5e\x95\x9a\x4b\xb3\x8c\xa3\xff\x3d\x46\x93\xcd\xec\x49\x32\xcc\x35\x68\xc0\x0b\xd4\xbf\x86\xfb\x1f\x4b\x39\xe8\x47\xd0\x84\xdb\xeb\xe1\x40\x78\xe9\x21\x93\x27\xec\x11\x3f\xa8\xec\xb9\xdf\x73\xaf\xb2\xe7\x09\xa0\xd6\xad\xf6\x3f\xa1\x21\x0f\x87\xea\x0c\x33\xce\x7c\x07\x06\xb2\x18\x99\x7b\x4d\x33\xbb\x1d\xf4\x88\x02\xbe\x99\x83\xe4\xa2\x6f\x87\x50\x79\x7a\xcc\x0c\x13\x71\x92\x7e\xd4\x3a\x46\xad\x93\xf4\xac\xca\xe3\xe8\x5a\xb2\x7b\x81\x60\x14\xe4\x68\x80\x20\xb5\x73\xae\x9b\x44\x14\x94\x0c\x14\x75\x30\xef\xc6\x09\x3d\x54\xd2\xa0\x34\xfb\x84\x3c\x9a\xc0\x6e\x29\x49\x4a\x35\xfa\xd1\x4a\x61\x93\x6d\x0a\x37\x19\x24\x62\x4e\x98\xcc\x04\x7e\xc0\xa5\xd2\x48\x23\x7d\xe2\xc5\x3b\xa1\xec\x49\x37\x44\xaa\xb2\xa3\x93\x50\x1d\xa9\xb8\x1f\xd9\x23\xac\xbc\x4c\x0a\xf1\x8b\x95\x81\x25\xe3\x02\xb3\x96\x90\x16\x11\xdd\x40\x32\x5c\xa8\x0c\x33\xe0\xd2\xa0\x5e\xb2\x05\xd6\xcd\x46\x2a\xdf\xd1\x6b\x59\x30\x5d\xad\x98\x88\x1d\xba\x77\x7e\x5f\xf2\xdb\x8f\x01\xea\xe2\x08\xba\x40\x53\x2c\x25\x2b\x7c\x01\x5f\x8b\xcd\x41\x70\xdc\x1d\x2c\xe9\x8a\xba\x45\x1d\x21\x6a\x01\x0d\xd8\x3e\x56\xba\x60\xc6\xa0\xf6\x4f\x71\xe7\x13\x74\x97\x08\x5b\x2d\x5d\x5c\xa9\xf7\xfe\xcb\x4a\xe1\x13\x7f\x17\xfb\x97\x71\x34\x18\x0f\x56\x17\x11\xdd\x98\x91\xc9\xfe\xc0\x2e\x8a\x2c\x3d\x16\x2c\xaf\x62\x12\x8c\x12\x3b\x33\x6a\x02\x4b\x26\x2a\xf4\x12\xdb\xbd\x7a\x8e\x0c\x06\x97\x8a\x4b\xf3\xeb\x2f\xe3\x89\x4e\xc9\x34\x92\xe9\xa7\x1f\xcf\xb2\x14\x8a\xbd\x98\xe7\xd8\x19\xc7\x32\xa5\xaf\xcb\x35\x16\xb5\xbd\xae\xec\x04\x8d\xa2\xc9\x2b\x6e\xeb\xc9\xc8\xcd\x6c\x6b\x9e\x51\x90\x2b\x34\x87\xeb\xca\xa8\xc2\xa5\xed\x7a\xce\x97\x30\x04\x73\xc2\x2a\xff\xe8\xe5\xed\x3f\x37\x1f\xb8\xcc\xbe\x74\x5b\x5b\xf7\xa4\xd5\x54\x43\x47\xb6\x1f\x01\x4d\xf8\x77\x00\x00\x00\xff\xff\xc9\x38\xcb\xe0\xee\x0f\x00\x00")

func templatesOpenapiTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesOpenapiTmpl,
		"templates/openapi.tmpl",
	)
}

func templatesOpenapiTmpl() (*asset, error) {
	bytes, err := templatesOpenapiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/openapi.tmpl", size: 4078, mode: os.FileMode(0644), modTime: time.Unix(1551788743, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0xcd, 0xe6, 0xd0, 0xee, 0x9c, 0xf5, 0xa3, 0x74, 0x50, 0x4b, 0x5a, 0x72, 0x7b, 0x5d, 0xb3, 0x3c, 0x3c, 0x8e, 0x2f, 0xc0, 0x14, 0x95, 0x7, 0x2f, 0x2b, 0x9f, 0xf3, 0x76, 0x67, 0x22, 0xa7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,

	"templates/main.tmpl": templatesMainTmpl,

	"templates/openapi.tmpl": templatesOpenapiTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"templates": &bintree{nil, map[string]*bintree{
		"main.tmpl":    &bintree{templatesMainTmpl, map[string]*bintree{}},
		"openapi.tmpl": &bintree{templatesOpenapiTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
