// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/openapi.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5d\x6f\xdb\xb8\x12\x7d\x96\x7e\xc5\x54\xe8\x2d\xa4\x1b\x47\xbe" +
	"\xc5\xbd\xb8\x0f\x5e\xf8\x21\x4d\x9a\x26\x40\x93\x74\x93\xe6\x29\x1b\x20\x8c\x35\x96\x89\x52\xa4\x42\xd1\x69\xb2" +
	"\x82\xfe\xfb\x62\x48\xea\xc3\xb6\xb2\x4d\x80\xf5\x8b\x25\xce\x70\x3e\xce\x1c\x1e\x71\x3a\x85\x43\x95\x21\xe4\x28" +
	"\x51\x33\x83\x19\xdc\x3f\x83\x2a\x51\xb2\x92\xef\x2f\x04\xdf\xf7\x06\xa5\x53\x38\xba\x80\xf3\x8b\xef\xf0\xf9\xe8" +
	"\xf4\x7b\x1a\x4e\xa7\x70\x85\x08\x2b\x63\xca\x6a\x36\x9d\xe6\xdc\xac\xd6\xf7\xe9\x42\x15\xd3\x8c\x49\x8e\x22\x37" +
	"\xec\x59\x28\x3d\x1d\x8d\x15\x86\x25\x5b\xfc\x60\x39\x42\xc1\xb8\x0c\x43\x5e\x94\x4a\x1b\x88\xc3\xa0\xae\x81\x2f" +
	"\x21\x3d\xb5\x0b\x55\x7a\x5c\x18\x68\x9a\x68\x59\x98\xa8\xae\x01\x65\x06\x4d\xb3\xe3\x74\x65\x34\x97\x79\x45\x8e" +
	"\x95\x7b\x1c\x38\x87\x41\xf4\xb6\xda\xa6\x0b\xc1\xa3\xcd\x5d\xba\x9a\xfe\x89\x5a\x09\x95\x4f\x85\xca\xb7\x8c\x55" +
	"\xb9\xfc\xf8\xdf\xe9\x42\xdd\x6b\x36\x6a\x79\xe4\x25\xea\x28\x4c\xc2\xb0\xae\xe1\xbd\x64\x05\xc2\x6c\x0e\xe9\x39" +
	"\x3d\x34\x8d\x5d\x64\x25\xb7\x6b\x5f\x54\xbb\x1a\x2e\xd7\x72\x01\xad\xad\x69\xae\x50\x3f\xa2\xae\xe2\x04\x6e\x6e" +
	"\x0b\x56\xde\xb8\x3e\x6f\xdd\x1f\xd4\x61\xa0\xd1\xac\xb5\x1c\xb3\xd6\x61\x40\x80\x69\x26\x73\x84\xf7\x95\x0d\x64" +
	"\xb3\xf9\x98\x16\xd1\x20\x18\xdd\x17\x04\x51\x86\xd5\x42\xf3\xd2\x70\x25\xa3\x19\x10\xb0\x3e\x46\x7a\xd4\x5b\x08" +
	"\xfa\x89\xf3\x5f\x6b\xb1\xe5\x77\x7d\xf9\xb5\xb3\x37\x13\x57\x4d\x3b\xc9\x26\xdc\xed\xf5\x12\x73\x5e\x19\xd4\x71" +
	"\xb5\xbe\x5f\xa8\xa2\x60\x32\x83\x7b\xa5\x44\x62\xfb\x54\xca\x50\xf5\x0b\xc1\xd3\x4b\xa5\x4c\x18\x06\x7c\x09\x03" +
	"\x4f\x2a\xdb\x3a\xcd\xe1\x83\x1d\x4a\x7a\xe8\x2c\xb6\x9f\xeb\x0a\x7d\x71\xd2\x21\xed\xca\xba\x5a\x29\x6d\x9c\x21" +
	"\xfd\xce\x8d\xe8\x2d\x5f\x95\xcc\x67\x36\xdb\x19\xd3\x3f\x32\xf5\x53\xc6\xd6\x6b\xab\xf9\x84\x9c\xa9\x1f\x40\x51" +
	"\xa1\x2d\xa2\xad\x30\xb5\xc1\x61\xbe\x15\x7d\xe8\x41\x49\x60\xfe\x8a\x2c\x04\x58\x38\x98\xa6\x2a\x89\xb3\x64\xa5" +
	"\x81\x5e\xb4\x6f\x7e\xa6\x16\xd7\xd8\xc2\x16\x04\x25\xd3\xac\xa8\xc8\xcf\x12\x32\x3d\xc7\x9f\x71\x12\x92\xe5\x91" +
	"\x69\xc0\x27\x56\x94\x02\x2b\x70\xb3\xb7\xeb\x7d\x1a\x7c\xb2\xf1\x3f\xb7\x4e\x8e\x31\x41\xb7\x69\x6f\x0e\x11\x40" +
	"\x04\x7b\xdd\x58\x5a\xd0\xbf\x31\xb3\x8a\x13\xd8\x83\xc8\x0e\xb8\xab\x37\xbd\xae\x08\x05\xbb\x88\x4f\xd0\x34\x7f" +
	"\xc8\xc8\xe7\xec\xce\x6d\x10\x2c\x8a\x8c\x12\x8f\xcc\xb1\x1f\xa4\x8f\xe4\xe9\x57\xd7\xfb\x56\x1a\x0e\x04\x67\x55" +
	"\x5f\x69\xe0\xdf\x67\x70\xb3\xc1\x6e\xb7\xc1\x75\xb9\xb3\x27\x08\x6c\xfc\x3e\xb8\xf3\x6e\xa9\x1b\xb4\x74\xde\x59" +
	"\x1e\xb2\xc9\x0d\xbf\x0b\xf1\x12\x9d\x2c\x03\x5a\x1e\xf5\x6d\x9c\xf0\x2c\x43\xd9\xa5\x73\xaf\x33\x42\xad\x37\x8d" +
	"\x96\xe0\x47\x35\xeb\x06\xeb\xbc\x0e\x74\x5e\xcd\xc0\xc1\x79\xc6\x25\x2f\xd6\xc5\x39\xad\xc5\x75\x0d\x02\x25\xa4" +
	"\x97\xf8\xb0\xe6\x1a\xb3\x6f\x8e\x2d\x4d\xe3\x0b\xba\x5c\xcb\x19\x10\x9f\x62\x9a\xc9\xbf\x37\x06\x32\x01\xa6\xf3" +
	"\xaa\x43\xd6\xf3\x2d\x08\x7a\xa9\x71\x8c\xfb\x82\xc6\x29\x75\x1c\x39\x13\xf1\x99\x7e\x74\x80\x9d\xef\x7c\x0e\x51" +
	"\xd4\xee\x6f\x03\xcc\xc7\x74\xf0\xa6\x8b\x79\x2a\x4d\x1b\x70\x9f\xcb\x0c\x9f\xa2\xe4\xf6\xc6\xca\xd0\xad\x1f\x52" +
	"\xe8\xfe\xd7\x5a\x50\x31\xce\x75\xcf\xc2\x4e\xf4\xb4\x87\x31\xf4\xe3\x6d\x19\xcf\x27\xf0\xde\x9e\x18\x4b\xfc\x1d" +
	"\x54\x3a\x3a\xd0\x94\xf0\xc1\xfb\xa6\xa7\x12\xa2\x92\x99\x55\x34\xe0\x10\x65\x9d\xfb\x63\x55\xa5\x97\x58\x0a\xb6" +
	"\xc0\x78\xad\xc5\x84\x08\x72\x57\xdf\x35\x0d\xb5\xe7\x02\x78\xf9\xaf\xeb\xbb\xe6\x8e\x38\x63\x91\xbd\x21\x3b\x35" +
	"\x7f\x3b\x81\x8f\x49\x9f\x7a\x48\xc4\xcd\x73\x13\x04\x1a\x1f\x5a\x95\x3c\x14\x1c\xa5\x49\xa9\xdd\x33\x34\x2b\x45" +
	"\x5e\x71\x42\xaa\x4c\x55\x24\xff\x60\xeb\x0f\x6b\xd4\xcf\xc3\xde\xa9\x8a\x39\x68\x7c\x48\x0f\xb2\xec\x77\xb2\x3a" +
	"\xb6\x9f\xb7\xda\xbb\xd5\xdf\xb0\x39\x92\xd1\x9d\x0c\x2b\x64\x19\xea\x17\x53\x9c\x58\xf3\xeb\x73\xfc\x0d\x80\x03" +
	"\x5d\xb8\xb0\xfa\xcb\xc4\x08\x04\xfd\x17\x9b\xc0\x72\x12\x4b\x9c\x74\x25\x1c\x7e\x3d\x6d\xab\x48\xd2\xd8\xaa\xff" +
	"\x73\x49\xaf\x6d\x0d\x7c\x09\x9b\x41\xde\x59\xae\x5b\xb7\x73\x2e\xac\x40\xb6\x8d\x7a\x49\xc0\x07\x18\xc7\xfa\x15" +
	"\x60\x2f\x0b\x93\x5e\x95\x9a\x4b\xb3\x8c\xa3\x7f\x3d\x46\x93\xcd\xec\x49\x32\xcc\x35\x18\xc0\x0b\xd0\xbf\x06\xfb" +
	"\xb7\xa5\x1c\xcc\x23\x68\xc2\xed\xf5\x70\x40\xbc\xf4\x90\xc9\x13\xf6\x88\x9f\x54\xf6\xdc\xef\xb9\x57\xd9\xf3\x04" +
	"\x50\xeb\x96\xfb\x5f\xd0\x90\x87\xab\xea\x0c\x33\xce\xfc\x04\x06\xb4\x18\xd1\xbd\xa6\x99\xdd\x0e\x66\x44\x01\xdf" +
	"\xcd\x41\x72\xd1\x8f\x43\xa8\x3c\x3d\x66\x86\x89\x38\x49\x3f\x6b\x1d\xa3\xd6\x49\x7a\x56\xe5\x71\x74\x2d\xd9\xbd" +
	"\x40\x30\x0a\x72\x34\x40\x25\xb5\x3a\xd7\x29\x11\x05\x25\x03\x45\x1d\xe8\xdd\x38\xa0\x87\x4a\x1a\x94\x66\x9f\x2a" +
	"\x8f\x26\xb0\xdb\x4a\x92\x52\x8f\x5e\x5a\x29\x6c\xb2\x0d\xe1\x26\x82\x04\xcc\x09\x93\x99\xc0\x4f\xb8\x54\x1a\x49" +
	"\xd2\x27\x9e\xbc\x13\xca\x9e\x74\x22\x52\x95\x1d\x9c\x54\xd5\x91\x8a\x7b\xc9\x1e\x41\xe5\x65\x50\x08\x5f\xac\x0c" +
	"\x2c\x19\x17\x98\xb5\x80\xb4\x15\xd1\x0d\x24\xc3\x85\xca\x30\x03\x2e\x0d\xea\x25\x5b\x60\xdd\x6c\xa4\xf2\x13\xbd" +
	"\x96\x05\xd3\xd5\x8a\x89\xd8\x55\xf7\xc1\xef\x4b\x7e\x7b\x5b\x41\x5d\x1c\x41\x17\x68\x8a\xa5\x64\x85\x2f\xd4\xd7" +
	"\xd6\xe6\x4a\x70\xd8\x1d\x2c\xe9\x8a\xba\x05\x1d\x55\xd4\x16\x34\x40\xfb\x58\xe9\x82\x19\x83\xda\x3f\xc5\x9d\x4f" +
	"\xd0\x5d\x22\x6c\xb7\x74\x71\xa5\xd9\xfb\x2f\x2b\x85\x4f\xfc\x5d\xec\x17\x72\x34\x90\x07\xcb\x8b\x88\x6e\xcc\xc8" +
	"\x64\x7f\x60\x17\x45\x96\x1e\x0b\x96\x57\x31\x11\x46\x89\x1d\x8d\x9a\xc0\x92\x89\x0a\x3d\xc5\x76\xaf\x9e\x23\xc2" +
	"\xe0\x52\x71\x69\xfe\xff\xbf\xf1\x44\xa7\x64\x1a\xc9\xf4\x9f\xb7\x67\x59\x0a\xc5\x5e\xcc\x73\xec\x8c\x63\x99\xd2" +
	"\xd7\xe5\x1a\x8b\xda\x5e\x57\x76\x82\x46\xd1\x2f\x63\x76\x5a\xb6\xa5\x60\xc4\x87\x2b\x34\x87\xeb\xca\xa8\xc2\x25" +
	"\xea\xa6\xcc\x97\x30\x4c\x7f\xc2\x2a\xff\xe8\x09\xed\x3f\x30\x9f\xb8\xcc\xbe\x75\x5b\x5b\xf7\xa4\x65\x51\x43\x87" +
	"\xb4\x3f\xf4\x4d\xf8\x57\x00\x00\x00\xff\xff\x28\xbc\xdd\xd3\xe4\x0f\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/openapi.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/openapi.tmpl",
		size: 4068,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1551039502, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/openapi.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"openapi.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
