// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/danielgtaylor/openapi-cli-generator

package main

import (
	{{ if .Imports.Fmt }}"fmt"{{ end }}
	{{ if .Imports.Strings }}"strings"{{ end }}

	"github.com/martinhej/openapi-cli-generator/cli"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

{{ $name := .Name }}
{{ $api := .GoName }}

func {{ $api }}Servers() []map[string]string {
	return []map[string]string{
		{{ range $server := .Servers }}
			map[string]string{
				"description": "{{ $server.Description }}",
				"url": "{{ $server.URL }}",
			},
		{{ end }}
	}
}

func {{ $api }}Register(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use: "{{ $name }}",
			Short: "{{ .Title }}",
			Long: cli.Markdown("{{ .Description }}"),
		}
	} else {
		cli.Root.Short = "{{ .Title }}"
		cli.Root.Long = cli.Markdown("{{ .Description }}")
	}

	{{ range $operation := .Operations }}
		func () {
			params := viper.New()

			var examples string

			{{ range $ex := .Examples }}
				examples += "  " + cli.Root.CommandPath() + " {{ $operation.Use }} {{ $ex }}\n"
			{{ end }}

			cmd := &cobra.Command{
				Use: "{{ .Use }}",
				{{- if .Aliases }}
					Aliases: []string{
						{{- range .Aliases }}
							"{{ . }}",
						{{- end }}
					},
				{{- end }}
				Short: "{{ .Short }}",
				Long: cli.Markdown("{{ .Long }}"),
				{{- if .Hidden }}
					Hidden: {{ .Hidden }},
				{{- end }}
				Example: examples,
				Args: cobra.MinimumNArgs({{ len .RequiredParams }}),
				Run: func(cmd *cobra.Command, args []string) {
					server := viper.GetString("server")
					if server == "" {
						server = {{ $api }}Servers()[viper.GetInt("server-index")]["url"]
					}

					url := server+"{{ .Path }}"

					{{ range $i, $param := .RequiredParams }}
						{{ if eq $param.In "path" }}
							url = strings.Replace(url, "{{`{`}}{{ $param.Name }}{{`}`}}", args[{{ $i }}], 1)
						{{ end }}
					{{ end }}

					req := cli.Client.{{ .Method }}().URL(url)

					{{ range $i, $param := .RequiredParams }}
						{{ if eq $param.In "query" }}
							req = req.AddQuery("{{ .Name }}", args[{{ $i }}])
						{{ else if eq $param.In "header" }}
							req = req.AddHeader("{{ .Name }}", args[{{ $i }}])
						{{ end }}
					{{ end }}

					{{- range .OptionalParams }}
						{{ .GoName }} := params.Get("{{ .CLIName }}").({{ .Type }})
						if {{ .GoName }} != {{ .TypeNil }} {
							{{- if eq .In "query" }}
								req = req.AddQuery("{{ .Name }}", fmt.Sprintf("%v", {{ .GoName }}))
							{{- else if eq .In "header" }}
								req = req.AddHeader("{{ .Name }}", fmt.Sprintf("%v", {{ .GoName }}))
							{{- end }}
						}
					{{- end }}

					{{ if .CanHaveBody }}
						body, err := cli.GetBody("{{ .MediaType }}", args[{{ len .RequiredParams}}:])
						if err != nil {
							log.Fatal().Err(err).Msg("Unable to get body")
						}

						if body != "" {
							req = req.AddHeader("Content-Type", "{{ .MediaType }}").BodyString(body)
						}
					{{ end }}

					cli.HandleBefore(cmd, params, req)

					resp, err := req.Do()
					if err != nil {
						log.Fatal().Err(err).Msg("Request failed")
					}

					if resp.StatusCode >= 400 {
						log.Fatal().Err(errors.New(fmt.Sprintf("HTTP %d | %s", resp.StatusCode, resp.Bytes()))).Msg("Request failed")
					}

					var decoded interface{}
					if err := cli.Unmarshal(resp, &decoded); err != nil {
						log.Fatal().Err(err).Msg("Unmarshalling response failed")
					}

					decoded = cli.HandleAfter(cmd, params, resp, decoded)

					cli.Formatter.Format(decoded)
				},
			}
			root.AddCommand(cmd)

			{{- range .OptionalParams }}
				{{- if eq .Type "boolean" }}
					cmd.Flags().Bool("{{ .CLIName }}", false, "{{ .Description }}")
				{{- else if eq .Type "int64" }}
					cmd.Flags().Int64("{{ .CLIName }}", 0, "{{ .Description }}")
				{{- else if eq .Type "float64" }}
					cmd.Flags().Float64("{{ .CLIName }}", 0.0, "{{ .Description }}")
				{{- else }}
					cmd.Flags().String("{{ .CLIName }}", "", cli.Markdown("{{ .Description }}"))
				{{- end }}
			{{- end }}

			cli.SetCustomFlags(cmd)

			if cmd.Flags().HasFlags() {
				params.BindPFlags(cmd.Flags())
			}
		}()
	{{ end }}
}
