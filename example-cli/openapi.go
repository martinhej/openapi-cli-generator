// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/danielgtaylor/openapi-cli-generator

package main

import (
	"fmt"

	"github.com/martinhej/openapi-cli-generator/cli"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

func openapiServers() []map[string]string {
	return []map[string]string{

		map[string]string{
			"description": "Test API server.",
			"url":         "http://localhost:8005",
		},
	}
}

func openapiRegister(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use:   "openapi",
			Short: "Example API",
			Long:  cli.Markdown(""),
		}
	} else {
		cli.Root.Short = "Example API"
		cli.Root.Long = cli.Markdown("")
	}

	func() {
		params := viper.New()

		var examples string

		examples += "  " + cli.Root.CommandPath() + " echo hello: world\n"

		cmd := &cobra.Command{
			Use:     "echo",
			Short:   "echo",
			Long:    cli.Markdown("Echo back body with the same content type."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				server := viper.GetString("server")
				if server == "" {
					server = openapiServers()[viper.GetInt("server-index")]["url"]
				}

				url := server + "/echo"

				req := cli.Client.Post().URL(url)

				paramEchoQuery := params.Get("echo-query").(string)
				if paramEchoQuery != "" {
					req = req.AddQuery("q", fmt.Sprintf("%v", paramEchoQuery))
				}
				paramXRequestId := params.Get("x-request-id").(string)
				if paramXRequestId != "" {
					req = req.AddHeader("x-request-id", fmt.Sprintf("%v", paramXRequestId))
				}

				body, err := cli.GetBody("application/json", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				if body != "" {
					req = req.AddHeader("Content-Type", "application/json").BodyString(body)
				}

				cli.HandleBefore(cmd, params, req)

				resp, err := req.Do()
				if err != nil {
					log.Fatal().Err(err).Msg("Request failed")
				}

				var decoded interface{}
				if err := cli.Unmarshal(resp, &decoded); err != nil {
					log.Fatal().Err(err).Msg("Unmarshalling response failed")
				}

				decoded = cli.HandleAfter(cmd, params, resp, decoded)

				cli.Formatter.Format(decoded)
			},
		}
		root.AddCommand(cmd)
		cmd.Flags().String("echo-query", "", "")
		cmd.Flags().String("x-request-id", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}
	}()

}
